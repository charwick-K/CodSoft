import math
import copy

class TicTacToeGame:
    def __init__(self):
        self.board = [[' ' for _ in range(3)] for _ in range(3)]
        self.current_turn = 'X'

    def show_board(self):
        for row in self.board:
            print("|".join(row))
            print("-----")

    def check_winner(self, player):
        return any(all(cell == player for cell in row) for row in self.board) or \
               any(all(self.board[i][j] == player for i in range(3)) for j in range(3)) or \
               all(self.board[i][i] == player for i in range(3)) or \
               all(self.board[i][2 - i] == player for i in range(3))

    def is_board_full(self):
        return all(cell != ' ' for row in self.board for cell in row)

    def is_game_over(self):
        return self.check_winner('X') or self.check_winner('O') or self.is_board_full()

    def get_available_moves(self):
        return [(i, j) for i in range(3) for j in range(3) if self.board[i][j] == ' ']

    def place_move(self, move):
        i, j = move
        self.board[i][j] = self.current_turn
        self.current_turn = 'O' if self.current_turn == 'X' else 'X'

    def revert_move(self, move):
        i, j = move
        self.board[i][j] = ' '
        self.current_turn = 'O' if self.current_turn == 'X' else 'X'

def minimax_algorithm(board, depth, is_maximizing):
    if depth == 0 or board.is_game_over():
        return evaluate_board(board), None

    best_move = None
    if is_maximizing:
        max_eval = -math.inf
        for move in board.get_available_moves():
            board.place_move(move)
            eval, _ = minimax_algorithm(board, depth - 1, False)
            board.revert_move(move)
            if eval > max_eval:
                max_eval = eval
                best_move = move
        return max_eval, best_move
    else:
        min_eval = math.inf
        for move in board.get_available_moves():
            board.place_move(move)
            eval, _ = minimax_algorithm(board, depth - 1, True)
            board.revert_move(move)
            if eval < min_eval:
                min_eval = eval
                best_move = move
        return min_eval, best_move

def evaluate_board(board):
    if board.check_winner('O'):
        return 1
    elif board.check_winner('X'):
        return -1
    else:
        return 0

def convert_to_coordinates(num):
    return (num - 1) // 3, (num - 1) % 3

if __name__ == "__main__":
    game = TicTacToeGame()

    while not game.is_game_over():
        game.show_board()

        if game.current_turn == 'X':
            while True:
                try:
                    move_input = int(input("Player X, enter your move (1-9): "))
                    if 1 <= move_input <= 9 and convert_to_coordinates(move_input) in game.get_available_moves():
                        move = convert_to_coordinates(move_input)
                        game.place_move(move)
                        break
                    else:
                        print("Invalid move. Try again.")
                except ValueError:
                    print("Invalid input. Please enter a number.")
        else:
            _, move = minimax_algorithm(copy.deepcopy(game), 9, True)
            print(f"Player O plays: {move}")
            game.place_move(move)

    game.show_board()

    if game.check_winner('X'):
        print("Congratulations! Player X won!")
    elif game.check_winner('O'):
        print("Player O wins!")
    else:
        print("It's a draw!")
